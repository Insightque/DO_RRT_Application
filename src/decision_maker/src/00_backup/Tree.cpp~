#include "../inc/Tree.h"
#include "../inc/Node.h"

Tree::Tree()
{
  m_pTree  = pcl::PointCloud<pcl::PointXYZI>::Ptr(new pcl::PointCloud<pcl::PointXYZI>);
}

Tree::~Tree()
{
    for( int i=0; i<m_vNodes.size(); i++)
    {
        delete m_vNodes[i];
    }
}

void Tree::AddNode(Node* pNode)
{
    m_vNodes.push_back(pNode);
    m_pTree->push_back(pNode->getNodePoint());
}

void Tree::SetkdTree()
{
    m_kdTree.setInputCloud(m_pTree);

}

void Tree::SearchNode(pcl::PointXYZI searchPoint, int K)
{
    std::vector<int> pointIdxNKNSearch(K);
    std::vector<float> pointNKNSquaredDistance(K);

    if ( m_kdTree.nearestKSearch (searchPoint, K, pointIdxNKNSearch, pointNKNSquaredDistance) > 0 )
    {
        for (size_t i = 0; i < pointIdxNKNSearch.size (); ++i)
              std::cout << "    "  <<   m_pTree->points[ pointIdxNKNSearch[i] ].x
                        << " " << m_pTree->points[ pointIdxNKNSearch[i] ].y
                        << " " << m_pTree->points[ pointIdxNKNSearch[i] ].z
                        << " " << searchPoint.x
                        << " " << searchPoint.y
                        << " " << searchPoint.z
                        << " (squared distance: " << pointNKNSquaredDistance[i] << ")" << std::endl;
    }
}
